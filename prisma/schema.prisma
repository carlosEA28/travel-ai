// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id
  name          String
  email         String
  emailVerified Boolean     @default(false)
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  Trip          Trip[]
  SavedTrip     SavedTrip[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Trip {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  title         String?
  destination   String
  startDate     DateTime
  endDate       DateTime
  budget        Float
  interests     String[]
  estimatedCost Float?
  coverImageUrl String?
  status        String      @default("planned")
  dayPlans      DayPlan[]
  SavedTrip     SavedTrip[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model DayPlan {
  id         String     @id @default(uuid())
  trip       Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId     String
  dayNumber  Int
  date       DateTime
  notes      String?
  activities Activity[]
}

model Activity {
  id            String   @id @default(uuid())
  dayPlan       DayPlan  @relation(fields: [dayPlanId], references: [id], onDelete: Cascade)
  dayPlanId     String
  title         String
  description   String?
  category      String
  locationName  String?
  lat           Float?
  lng           Float?
  estimatedCost Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SavedTrip {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId    String
  createdAt DateTime @default(now())
}
